<link rel="stylesheet" href="style.css">
<!-- Comment Template -->
<div class="d-flex justify-content-center align-items-center mt-3">
  <div id="player-warning" style="display:none;" class="alert alert-warning " role="alert">
    <small id="source-alert-warning" class="source-alert-warning"></p>
  </div>
  <div id="player-danger" style="display:none;" class="alert alert-danger " role="alert">
    <small id="source-alert-danger" class="source-alert-danger"></p>
  </div>
</div>
<div class="d-flex justify-content-center align-items-center mt-3">
    <a id="logo-link" href="#">
        <img class="logo" src="../media/{{ station.stn_name }}/128x128.png">
    </a>
</div>
<div class="d-flex justify-content-center align-items-center mt-3">
    <audio id="player" volume="0.5" preload="auto" playsinline></audio>
    <button id="vol_minus" class="button-raised vol_con" style="display: none" role="button">âˆ’</button>
    <button class="button-raised button-raised-mute vol_con" style="display: none" role="button">Mute</button>
    <button id="vol_plus" class="button-raised vol_con" style="display: none" role="button">+</button>
    <button id="start-button" class="button-raised" role="button" style="display: block">Tune in!</button>
    <button id="loading-button" class="button-raised" role="button" style="background-color: chocolate; display: none" disabled>Loading . . .</button> <!-- hide the play button by default unless audio source is valid -->
</div>

<script>
// DOMContentLoaded event handler
document.addEventListener('DOMContentLoaded', function() {
    const player = document.getElementById('player');
    const volMinusBtn = document.getElementById('vol_minus');
    const muteBtn = document.querySelector('.button-raised-mute');
    const volPlusBtn = document.getElementById('vol_plus');
    const startBtn = document.getElementById('start-button');
    const loadingBtn = document.getElementById('loading-button');
    const logoLink = document.getElementById('logo-link');

    const LOCAL_SOURCE = location.origin + ":8080/{{ station.stn_name }}/{{ station.tz_offset }}";
    const STANDBY_SOURCE = "https://bbcradiorelay.net:8443/{{ station.stn_name }}/{{ station.tz_offset }}";
    const HTTP_FALLBACK_SOURCE = "http://bbcradiorelay.duckdns.org:8000/{{ station.stn_name }}/{{ station.tz_offset }}";
    const FAILED_SOURCE = '../media/radio_noise.ogg';

    const LOCAL_AUDIO_NOT_BUFFERED = 'The local audio has not buffered yet.';
    const STANDBY_AUDIO_UNAVAILABLE = 'The HTTPS standby audio is not available. Using HTTP.';
    const BOTH_AUDIO_SOURCES_FAILED = 'Both audio sources failed. Try again later.';

    const FALLBACK_VOLUME = 0.25;

// ----------------------------------------------------------------------------

function setLoadingState() {
    console.log('setLoadingState event fired');
    loadingBtn.style.display = 'block'; // Show the "Loading" button
    startBtn.style.display = 'none'; // Hide the "Tune In" button
    document.getElementById('player-warning').style.display = 'none';
    document.getElementById('player-danger').style.display = 'none';
    // Hide the volume control buttons
    document.querySelectorAll('.vol_con').forEach(function(element) {
        element.style.display = 'none';
    });
}

function loadSource(source) {
    console.log('loadSource event fired');
    console.log(source);

    player.src = source;
    player.load();
    player.addEventListener('error', function() {
        handleSourceError(source); // based on the source that failed
    });
}

function handleCanPlayThrough() {
    console.log('handleCanPlayThrough event fired');
    player.play();
    loadingBtn.style.display = 'none'; // Hide the "Loading" button
    startBtn.style.display = 'none'; // Hide the "Tune In" button
    // Show the volume control buttons
    document.querySelectorAll('.vol_con').forEach(function(element) {
        element.style.display = 'block';
    });
}

function handleSourceError(unfoundSource) {
    console.log('handleSourceError event fired');
    console.log(unfoundSource);

    if (unfoundSource === LOCAL_SOURCE) {
        document.getElementById('player-danger').style.display = 'none'; // Hide the danger alert
        document.getElementById('player-warning').textContent = LOCAL_AUDIO_NOT_BUFFERED;
        document.getElementById('player-warning').style.display = 'block'; // Show the warning alert
        loadSource(STANDBY_SOURCE); // Try loading the standby source

    } else if (unfoundSource === STANDBY_SOURCE) {
        document.getElementById('player-danger').style.display = 'none'; // Hide the danger alert
        document.getElementById('player-warning').textContent = STANDBY_AUDIO_UNAVAILABLE;
        document.getElementById('player-warning').style.display = 'block'; // Show the warning alert
        loadSource(HTTP_FALLBACK_SOURCE); // Try loading the HTTP fallback source

    } else if (unfoundSource === HTTP_FALLBACK_SOURCE) {
        document.getElementById('player-warning').style.display = 'none'; // Hide the warning alert
        document.getElementById('player-danger').textContent = BOTH_AUDIO_SOURCES_FAILED;
        document.getElementById('player-danger').style.display = 'block'; // Show the danger alert
        failedSourcePlay(); // Play radio static if all else fails
    } else {
        console.error('Unknown error source:', unfoundSource); // Log an error
    }
}


// ----------------------------------------------------------------------------
// The "logo link" button allows me to debug the start button.

function handleStartOrLogoClick(source) {
    console.log('Button clicked.');
    setLoadingState(); // configure buttons for reload
    loadSource(source); // Load the audio source when the button is clicked
    player.oncanplaythrough = handleCanPlayThrough;
}

startBtn.addEventListener('click', () => {
    handleStartOrLogoClick(LOCAL_SOURCE);
});

logoLink.addEventListener('click', () => {
    handleStartOrLogoClick(LOCAL_SOURCE);
});
// ----------------------------------------------------------------------------


// audio to play when no valid sources found
function failedSourcePlay() {
    console.log('Failed source activated.')
    player.src = FAILED_SOURCE;
    player.volume = FALLBACK_VOLUME; // Set volume for fallback radio static
    player.loop = true; // Enable loop for fallback
    player.play();
}

// 'click' event handler for mute button
muteBtn.addEventListener('click', function() {
    player.muted = !player.muted;
    console.log('Mute button clicked.');
    if (player.muted) {
        this.classList.add('muted');
    } else {
        this.classList.remove('muted');
    }
})

// 'click' event handler for volume minus button
volMinusBtn.addEventListener('click', function() {
    player.volume = Math.max(0.1, player.volume - 0.1);
    console.log('Volume Minus button clicked.');
    console.log(player.volume);
})

// 'click' event handler for volume plus button
volPlusBtn.addEventListener('click', function() {
    player.volume = Math.min(1, player.volume + 0.1);
    console.log('Volume Plus button clicked.');
    console.log(player.volume);
})

})
</script>
